IMPORTANT DEBUGGING NOTE: batches of tests are run inside their
own process. For debugging a test inside a debugger, use the
--gtest_filter=<your_test_name> flag along with
--single-process-tests.
Using sharding settings from environment. This is shard 0/1
Using 1 parallel jobs.
Note: Google Test filter = URLParser.Parsing
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from URLParser
[ RUN      ] URLParser.Parsing
../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: "{'"
  parsed_url.host()
    Which is: "%7B%27"
{"url":"g:/<//{'", "error":{"component":"host", "expected":"{'", "actual":"%7B%27"}}
Stack trace:
#0 0x55d8353a3885 url::(anonymous namespace)::CheckComponents()
#1 0x55d8353a15a8 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"X://[::]:65502</", "exception":"invalid URL"}
Stack trace:
#0 0x55d8353a1446 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: ","
  parsed_url.host()
    Which is: "%2C"
{"url":"http://[::]<//:𺈟@,", "error":{"component":"host", "expected":",", "actual":"%2C"}}
Stack trace:
#0 0x55d8353a3885 url::(anonymous namespace)::CheckComponents()
#1 0x55d8353a15a8 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"b://[::]:62556</", "exception":"invalid URL"}
Stack trace:
#0 0x55d8353a1446 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: "="
  parsed_url.host()
    Which is: "%3D"
{"url":"file:///<//=", "error":{"component":"host", "expected":"=", "actual":"%3D"}}
Stack trace:
#0 0x55d8353a3885 url::(anonymous namespace)::CheckComponents()
#1 0x55d8353a15a8 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"I:///!</", "exception":"invalid URL"}
Stack trace:
#0 0x55d8353a1446 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: ")"
  parsed_url.host()
    Which is: "%29"
{"url":"ws://[::]<//䉠@)", "error":{"component":"host", "expected":")", "actual":"%29"}}
Stack trace:
#0 0x55d8353a3885 url::(anonymous namespace)::CheckComponents()
#1 0x55d8353a15a8 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

[  FAILED  ] URLParser.Parsing (3 ms)
[----------] 1 test from URLParser (4 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (5 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] URLParser.Parsing

 1 FAILED TEST
[1/1] URLParser.Parsing (3 ms)
1 test failed:
    URLParser.Parsing (../../url/url_parsing_unittest.cc:100)
Tests took 0 seconds.
