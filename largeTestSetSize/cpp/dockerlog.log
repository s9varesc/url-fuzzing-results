Already up to date.
[00:00:00] prepare result locations
[00:00:00] fuzzing targets all 
[00:00:00] fuzzing firefox
[00:00:00] removing old coverage data
[00:00:02] executing tests
[01:34:06] generating reports
[01:34:09] browser output cleanup
[01:34:09] fuzzing chromium
[2021-09-04 15:45:38,329 INFO] Building ['url_unittests'].
[01:34:10] ninja: Entering directory `/home/chromium/src/out/coverage'
[01:34:13] [0/1] Regenerating ninja files
[01:34:27] [1/2] CXX obj/url/url_unittests/url_parsing_unittest.o
[01:34:30] [2/2] LINK ./url_unittests
[2021-09-04 15:45:59,529 INFO] Running command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing", the output is redirected to "/home/chromium/src/out/report/linux/logs/url_unittests_output.log".
[2021-09-04 15:45:59,966 WARNING] Command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing" exited with non-zero return code.
[2021-09-04 15:45:59,966 INFO] Creating target profile data file.
[2021-09-04 15:46:00,543 INFO] Target "url_unittests" profile data is created as: "/home/chromium/src/out/report/url_unittests.profdata".
[2021-09-04 15:46:00,547 INFO] Creating the coverage profile data file.
[2021-09-04 15:46:00,576 INFO] Code coverage profile data is created as: "/home/chromium/src/out/report/linux/coverage.profdata".
[2021-09-04 15:46:00,577 INFO] Finding shared libraries for targets (if any).
[2021-09-04 15:46:00,584 INFO] Finished finding shared libraries for targets.
[2021-09-04 15:46:00,585 INFO] Generating code coverage report in html (this can take a while depending on size of target!).
[2021-09-04 15:46:02,213 INFO] Index file for html report is generated as: "file:///home/chromium/src/out/report/linux/index.html".
[01:34:33] browser output cleanup
[01:34:33] fuzzing languages
[01:34:33] fuzzing Python
[01:34:34] fuzzing C
[01:34:34] fuzzing Cpp
[01:34:44] fuzzing Java
[01:34:44] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode
[01:34:44] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode
WARNING : java.lang.Object can't be statically instrumented and was excluded
[01:35:12] fuzzing Ruby
[01:35:13] Coverage report generated for Unknown Test Framework to /home/url-fuzzing/languagefuzzing/RubyCoverage/coverage. 139 / 193 LOC (72.02%) covered.
[01:35:13] fuzzing JavaScript
[01:35:18] fuzzing PHP
[01:35:21] fuzzing Go
[01:35:21] finalizing results
[01:35:29] writing resultoverview
[01:35:29] writing browseroverview
[01:35:29] used seed: -3839114336793880439
[01:35:29] done
