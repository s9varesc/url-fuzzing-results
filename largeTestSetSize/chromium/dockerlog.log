Already up to date.
[00:00:00] prepare result locations
[00:00:00] fuzzing targets all 
[00:00:00] fuzzing firefox
[00:00:01] removing old coverage data
[00:00:02] executing tests
[01:53:58] generating reports
[01:54:00] browser output cleanup
[01:54:00] fuzzing chromium
[2021-09-04 22:05:26,954 INFO] Building ['url_unittests'].
[01:54:01] ninja: Entering directory `/home/chromium/src/out/coverage'
[01:54:04] [0/1] Regenerating ninja files
[01:54:18] [1/2] CXX obj/url/url_unittests/url_parsing_unittest.o
[01:54:20] [2/2] LINK ./url_unittests
[2021-09-04 22:05:46,863 INFO] Running command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing", the output is redirected to "/home/chromium/src/out/report/linux/logs/url_unittests_output.log".
[2021-09-04 22:05:47,563 WARNING] Command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing" exited with non-zero return code.
[2021-09-04 22:05:47,564 INFO] Creating target profile data file.
[2021-09-04 22:05:48,142 INFO] Target "url_unittests" profile data is created as: "/home/chromium/src/out/report/url_unittests.profdata".
[2021-09-04 22:05:48,178 INFO] Creating the coverage profile data file.
[2021-09-04 22:05:48,201 INFO] Code coverage profile data is created as: "/home/chromium/src/out/report/linux/coverage.profdata".
[2021-09-04 22:05:48,201 INFO] Finding shared libraries for targets (if any).
[2021-09-04 22:05:48,209 INFO] Finished finding shared libraries for targets.
[2021-09-04 22:05:48,209 INFO] Generating code coverage report in html (this can take a while depending on size of target!).
[2021-09-04 22:05:49,871 INFO] Index file for html report is generated as: "file:///home/chromium/src/out/report/linux/index.html".
[01:54:23] browser output cleanup
[01:54:23] fuzzing languages
[01:54:24] fuzzing Python
[01:54:25] fuzzing C
[01:54:25] fuzzing Cpp
[01:54:35] fuzzing Java
[01:54:36] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode
[01:54:36] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode
WARNING : java.lang.Object can't be statically instrumented and was excluded
[01:55:07] fuzzing Ruby
[01:55:08] Coverage report generated for Unknown Test Framework to /home/url-fuzzing/languagefuzzing/RubyCoverage/coverage. 139 / 193 LOC (72.02%) covered.
[01:55:08] fuzzing JavaScript
[01:55:13] fuzzing PHP
[01:55:18] fuzzing Go
[01:55:19] finalizing results
[01:55:33] writing resultoverview
[01:55:33] writing browseroverview
[01:55:33] used seed: -3839114336793880439
[01:55:33] done
