Already up to date.
[00:00:00] prepare result locations
[00:00:00] fuzzing targets all 
[00:00:00] fuzzing firefox
[00:00:01] removing old coverage data
[00:00:02] executing tests
[03:24:17] generating reports
[03:24:19] browser output cleanup
[03:24:19] fuzzing chromium
[2021-09-05 16:46:39,351 INFO] Building ['url_unittests'].
[03:24:20] ninja: Entering directory `/home/chromium/src/out/coverage'
[03:24:24] [0/1] Regenerating ninja files
[03:24:38] [1/2] CXX obj/url/url_unittests/url_parsing_unittest.o
[03:24:39] [2/2] LINK ./url_unittests
[2021-09-05 16:46:59,297 INFO] Running command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing", the output is redirected to "/home/chromium/src/out/report/linux/logs/url_unittests_output.log".
[2021-09-05 16:47:01,357 WARNING] Command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing" exited with non-zero return code.
[2021-09-05 16:47:01,359 INFO] Creating target profile data file.
[2021-09-05 16:47:01,938 INFO] Target "url_unittests" profile data is created as: "/home/chromium/src/out/report/url_unittests.profdata".
[2021-09-05 16:47:07,249 INFO] Creating the coverage profile data file.
[2021-09-05 16:47:07,288 INFO] Code coverage profile data is created as: "/home/chromium/src/out/report/linux/coverage.profdata".
[2021-09-05 16:47:07,289 INFO] Finding shared libraries for targets (if any).
[2021-09-05 16:47:07,298 INFO] Finished finding shared libraries for targets.
[2021-09-05 16:47:07,298 INFO] Generating code coverage report in html (this can take a while depending on size of target!).
[2021-09-05 16:47:08,845 INFO] Index file for html report is generated as: "file:///home/chromium/src/out/report/linux/index.html".
[03:24:49] browser output cleanup
[03:24:49] fuzzing languages
[03:25:04] fuzzing Python
[03:25:05] fuzzing C
[03:25:05] fuzzing Cpp
[03:25:17] fuzzing Java
[03:25:18] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode
[03:25:18] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode
WARNING : java.lang.Object can't be statically instrumented and was excluded
[03:25:56] fuzzing Ruby
[03:25:58] Coverage report generated for Unknown Test Framework to /home/url-fuzzing/languagefuzzing/RubyCoverage/coverage. 139 / 193 LOC (72.02%) covered.
[03:25:58] fuzzing JavaScript
[03:26:02] fuzzing PHP
[03:26:12] fuzzing Go
[03:26:13] finalizing results
[03:26:43] skip writing md file
[03:26:43] skip html prettify due to large nr of inputs (15686)
[03:26:43] writing resultoverview
[03:26:43] skip prettify detailed results due to large nr of inputs(15686)
[03:26:43] writing browseroverview
[03:26:43] used seed: -3839114336793880439
[03:26:43] done
