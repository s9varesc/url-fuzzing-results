Already up to date.
[00:00:00] prepare result locations
[00:00:00] fuzzing targets all 
[00:00:00] fuzzing firefox
[00:00:01] removing old coverage data
[00:00:03] executing tests
[03:35:59] generating reports
[03:36:01] browser output cleanup
[03:36:01] fuzzing chromium
[2021-09-05 20:27:25,269 INFO] Building ['url_unittests'].
[03:36:02] ninja: Entering directory `/home/chromium/src/out/coverage'
[03:36:05] [0/1] Regenerating ninja files
[03:36:19] [1/2] CXX obj/url/url_unittests/url_parsing_unittest.o
[03:36:21] [2/2] LINK ./url_unittests
[2021-09-05 20:27:45,020 INFO] Running command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing", the output is redirected to "/home/chromium/src/out/report/linux/logs/url_unittests_output.log".
[2021-09-05 20:27:46,848 WARNING] Command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing" exited with non-zero return code.
[2021-09-05 20:27:46,849 INFO] Creating target profile data file.
[2021-09-05 20:27:47,433 INFO] Target "url_unittests" profile data is created as: "/home/chromium/src/out/report/url_unittests.profdata".
[2021-09-05 20:27:47,437 INFO] Creating the coverage profile data file.
[2021-09-05 20:27:47,465 INFO] Code coverage profile data is created as: "/home/chromium/src/out/report/linux/coverage.profdata".
[2021-09-05 20:27:47,466 INFO] Finding shared libraries for targets (if any).
[2021-09-05 20:27:47,474 INFO] Finished finding shared libraries for targets.
[2021-09-05 20:27:47,474 INFO] Generating code coverage report in html (this can take a while depending on size of target!).
[2021-09-05 20:27:49,775 INFO] Index file for html report is generated as: "file:///home/chromium/src/out/report/linux/index.html".
[03:36:26] browser output cleanup
[03:36:26] fuzzing languages
[03:36:27] fuzzing Python
[03:36:28] fuzzing C
[03:36:28] fuzzing Cpp
[03:36:37] fuzzing Java
[03:36:38] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode
[03:36:38] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode
WARNING : java.lang.Object can't be statically instrumented and was excluded
[03:37:08] fuzzing Ruby
[03:37:10] Coverage report generated for Unknown Test Framework to /home/url-fuzzing/languagefuzzing/RubyCoverage/coverage. 139 / 193 LOC (72.02%) covered.
[03:37:10] fuzzing JavaScript
[03:37:15] fuzzing PHP
[03:37:25] fuzzing Go
[03:37:26] finalizing results
[03:37:58] skip writing md file
[03:37:58] skip html prettify due to large nr of inputs (16649)
[03:37:58] writing resultoverview
[03:37:58] skip prettify detailed results due to large nr of inputs(16649)
[03:37:58] writing browseroverview
[03:37:58] used seed: -3839114336793880439
[03:37:58] done
