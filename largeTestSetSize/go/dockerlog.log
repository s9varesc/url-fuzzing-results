Already up to date.
[00:00:00] prepare result locations
[00:00:00] fuzzing targets all 
[00:00:00] fuzzing firefox
[00:00:01] removing old coverage data
[00:00:03] executing tests
[02:20:42] generating reports
[02:20:44] browser output cleanup
[02:20:44] fuzzing chromium
[2021-09-05 00:29:34,879 INFO] Building ['url_unittests'].
[02:20:45] ninja: Entering directory `/home/chromium/src/out/coverage'
[02:20:48] [0/1] Regenerating ninja files
[02:21:02] [1/2] CXX obj/url/url_unittests/url_parsing_unittest.o
[02:21:03] [2/2] LINK ./url_unittests
[2021-09-05 00:29:54,355 INFO] Running command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing", the output is redirected to "/home/chromium/src/out/report/linux/logs/url_unittests_output.log".
[2021-09-05 00:29:55,421 WARNING] Command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing" exited with non-zero return code.
[2021-09-05 00:29:55,423 INFO] Creating target profile data file.
[2021-09-05 00:29:55,998 INFO] Target "url_unittests" profile data is created as: "/home/chromium/src/out/report/url_unittests.profdata".
[2021-09-05 00:29:56,001 INFO] Creating the coverage profile data file.
[2021-09-05 00:29:56,029 INFO] Code coverage profile data is created as: "/home/chromium/src/out/report/linux/coverage.profdata".
[2021-09-05 00:29:56,030 INFO] Finding shared libraries for targets (if any).
[2021-09-05 00:29:56,038 INFO] Finished finding shared libraries for targets.
[2021-09-05 00:29:56,038 INFO] Generating code coverage report in html (this can take a while depending on size of target!).
[2021-09-05 00:29:58,184 INFO] Index file for html report is generated as: "file:///home/chromium/src/out/report/linux/index.html".
[02:21:08] browser output cleanup
[02:21:08] fuzzing languages
[02:21:08] fuzzing Python
[02:21:09] fuzzing C
[02:21:09] fuzzing Cpp
[02:21:18] fuzzing Java
[02:21:19] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode
[02:21:19] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode
WARNING : java.lang.Object can't be statically instrumented and was excluded
[02:21:48] fuzzing Ruby
[02:21:49] Coverage report generated for Unknown Test Framework to /home/url-fuzzing/languagefuzzing/RubyCoverage/coverage. 139 / 193 LOC (72.02%) covered.
[02:21:49] fuzzing JavaScript
[02:21:54] fuzzing PHP
[02:22:00] fuzzing Go
[02:22:03] finalizing results
[02:22:18] writing resultoverview
[02:22:18] writing browseroverview
[02:22:18] used seed: -3839114336793880439
[02:22:18] done
