Already up to date.
[00:00:00] prepare result locations
[00:00:00] fuzzing targets all 
[00:00:00] fuzzing firefox
[00:00:00] removing old coverage data
[00:00:02] executing tests
[00:01:44] generating reports
[00:01:48] browser output cleanup
[00:01:48] fuzzing chromium
[2021-06-22 09:21:34,616 INFO] Building ['url_unittests'].
[00:01:49] ninja: Entering directory `/home/chromium/src/out/coverage'
[00:01:52] [0/1] Regenerating ninja files
[00:02:08] [1/2] CXX obj/url/url_unittests/url_parsing_unittest.o
[00:02:10] [2/2] LINK ./url_unittests
[2021-06-22 09:21:56,753 INFO] Running command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing", the output is redirected to "/home/chromium/src/out/report/linux/logs/url_unittests_output.log".
[2021-06-22 09:21:56,844 WARNING] Command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing" exited with non-zero return code.
[2021-06-22 09:21:56,844 INFO] Creating target profile data file.
[2021-06-22 09:21:57,474 INFO] Target "url_unittests" profile data is created as: "/home/chromium/src/out/report/url_unittests.profdata".
[2021-06-22 09:21:57,587 INFO] Creating the coverage profile data file.
[2021-06-22 09:21:57,614 INFO] Code coverage profile data is created as: "/home/chromium/src/out/report/linux/coverage.profdata".
[2021-06-22 09:21:57,615 INFO] Finding shared libraries for targets (if any).
[2021-06-22 09:21:57,624 INFO] Finished finding shared libraries for targets.
[2021-06-22 09:21:57,624 INFO] Generating code coverage report in html (this can take a while depending on size of target!).
[2021-06-22 09:21:59,564 INFO] Index file for html report is generated as: "file:///home/chromium/src/out/report/linux/index.html".
[00:02:13] browser output cleanup
[00:02:13] fuzzing languages
[00:02:13] fuzzing Python
[00:02:14] fuzzing C
[00:02:15] fuzzing Cpp
[00:02:28] fuzzing Java
[00:02:28] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode
[00:02:28] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode
WARNING : java.lang.Object can't be statically instrumented and was excluded
[00:03:05] fuzzing Ruby
[00:03:05] Coverage report generated for Unknown Test Framework to /home/url-fuzzing/languagefuzzing/RubyCoverage/coverage. 139 / 193 LOC (72.02%) covered.
[00:03:05] fuzzing JavaScript
[00:03:11] fuzzing PHP
[00:03:12] fuzzing Go
[00:03:13] finalizing results
Traceback (most recent call last):
  File "produceResultPresentation.py", line 564, in <module>
[00:03:17] writing resultoverview
[00:03:17] writing browseroverview
    f=open("./used_seed", "r")
FileNotFoundError: [Errno 2] No such file or directory: './used_seed'
[00:03:17] done
