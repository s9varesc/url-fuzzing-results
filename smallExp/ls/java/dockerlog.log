Already up to date.
[00:00:00] prepare result locations
[00:00:00] fuzzing targets all 
[00:00:00] fuzzing firefox
[00:00:01] removing old coverage data
[00:00:02] executing tests
[00:00:15] generating reports
[00:00:18] browser output cleanup
[00:00:18] fuzzing chromium
[2021-09-18 19:51:25,029 INFO] Building ['url_unittests'].
[00:00:19] ninja: Entering directory `/home/chromium/src/out/coverage'
[00:00:27] [0/1] Regenerating ninja files
[00:00:41] [1/2] CXX obj/url/url_unittests/url_parsing_unittest.o
[00:00:45] [2/2] LINK ./url_unittests
[2021-09-18 19:51:51,811 INFO] Running command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing", the output is redirected to "/home/chromium/src/out/report/linux/logs/url_unittests_output.log".
[2021-09-18 19:51:54,270 WARNING] Command: "out/coverage/url_unittests --gtest_filter=URLParser.Parsing" exited with non-zero return code.
[2021-09-18 19:51:54,271 INFO] Creating target profile data file.
[2021-09-18 19:51:54,844 INFO] Target "url_unittests" profile data is created as: "/home/chromium/src/out/report/url_unittests.profdata".
[2021-09-18 19:51:57,727 INFO] Creating the coverage profile data file.
[2021-09-18 19:51:57,752 INFO] Code coverage profile data is created as: "/home/chromium/src/out/report/linux/coverage.profdata".
[2021-09-18 19:51:57,753 INFO] Finding shared libraries for targets (if any).
[2021-09-18 19:51:57,761 INFO] Finished finding shared libraries for targets.
[2021-09-18 19:51:57,761 INFO] Generating code coverage report in html (this can take a while depending on size of target!).
[2021-09-18 19:51:59,247 INFO] Index file for html report is generated as: "file:///home/chromium/src/out/report/linux/index.html".
[00:00:53] browser output cleanup
[00:00:53] fuzzing languages
[00:00:53] fuzzing Python
[00:00:54] fuzzing C
[00:00:55] fuzzing Cpp
[00:01:04] fuzzing Java
[00:01:05] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode
[00:01:05] update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in manual mode
WARNING : java.lang.Object can't be statically instrumented and was excluded
[00:01:41] fuzzing Ruby
[00:01:41] Coverage report generated for Unknown Test Framework to /home/url-fuzzing/languagefuzzing/RubyCoverage/coverage. 139 / 193 LOC (72.02%) covered.
[00:01:41] fuzzing JavaScript
[00:01:48] fuzzing PHP
[00:01:48] fuzzing Go
[00:01:54] finalizing results
[00:01:57] writing resultoverview
[00:01:57] writing browseroverview
[00:01:57] used seed: 2629020299009809127
[00:01:57] done
