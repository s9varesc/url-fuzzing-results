IMPORTANT DEBUGGING NOTE: batches of tests are run inside their
own process. For debugging a test inside a debugger, use the
--gtest_filter=<your_test_name> flag along with
--single-process-tests.
Using sharding settings from environment. This is shard 0/1
Using 1 parallel jobs.
Note: Google Test filter = URLParser.Parsing
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from URLParser
[ RUN      ] URLParser.Parsing
../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"I:/<///﷎", "exception":"invalid URL"}
Stack trace:
#0 0x555b9b347ec6 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"T://[dd2a:beca::ebfb:caaf:250.254.251.252]</", "exception":"invalid URL"}
Stack trace:
#0 0x555b9b347ec6 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: "8)"
  parsed_url.host()
    Which is: "8%29"
{"url":"ftp://8)</", "error":{"component":"host", "expected":"8)", "actual":"8%29"}}
Stack trace:
#0 0x555b9b34a305 url::(anonymous namespace)::CheckComponents()
#1 0x555b9b348028 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: "!n"
  parsed_url.host()
    Which is: ""
{"url":"A://!n", "error":{"component":"host", "expected":"!n", "actual":""}}
Stack trace:
#0 0x555b9b34a305 url::(anonymous namespace)::CheckComponents()
#1 0x555b9b348028 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: "[adbb:eaaf:dbbe:faea:efbc:fdaf:ff41:fefb]"
  parsed_url.host()
    Which is: ""
{"url":"H://[adbb:eaaf:dbbe:faea:efbc:fdaf:255.65.254.251]", "error":{"component":"host", "expected":"[adbb:eaaf:dbbe:faea:efbc:fdaf:ff41:fefb]", "actual":""}}
Stack trace:
#0 0x555b9b34a305 url::(anonymous namespace)::CheckComponents()
#1 0x555b9b348028 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"K:/<///", "exception":"invalid URL"}
Stack trace:
#0 0x555b9b347ec6 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"file:///<//;v", "exception":"invalid URL"}
Stack trace:
#0 0x555b9b347ec6 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: ""
  parsed_url.host()
    Which is: "j"
{"url":"c:/<///j:/", "error":{"component":"host", "expected":"", "actual":"j"}}
Stack trace:
#0 0x555b9b34a305 url::(anonymous namespace)::CheckComponents()
#1 0x555b9b348028 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"G://`</", "exception":"invalid URL"}
Stack trace:
#0 0x555b9b347ec6 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: "63.255.251.255"
  parsed_url.host()
    Which is: ""
{"url":"file://63.255.251.255</", "error":{"component":"host", "expected":"63.255.251.255", "actual":""}}
Stack trace:
#0 0x555b9b34a305 url::(anonymous namespace)::CheckComponents()
#1 0x555b9b348028 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"a:///'ﺩ</", "exception":"invalid URL"}
Stack trace:
#0 0x555b9b347ec6 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:54: Failure
Expected equality of these values:
  parse_case.host
    Which is: "{n"
  parsed_url.host()
    Which is: "%7Bn"
{"url":"file:///<//{n", "error":{"component":"host", "expected":"{n", "actual":"%7Bn"}}
Stack trace:
#0 0x555b9b34a305 url::(anonymous namespace)::CheckComponents()
#1 0x555b9b348028 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

../../url/url_parsing_unittest.cc:32: Failure
Value of: parsed_url.is_valid()
  Actual: false
Expected: true
{"url":"S://[6fec::cbbc:ebca:255.251.254.253]</", "exception":"invalid URL"}
Stack trace:
#0 0x555b9b347ec6 url::(anonymous namespace)::URLParser_Parsing_Test::TestBody()

[  FAILED  ] URLParser.Parsing (8 ms)
[----------] 1 test from URLParser (9 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (9 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] URLParser.Parsing

 1 FAILED TEST
[1/1] URLParser.Parsing (8 ms)
1 test failed:
    URLParser.Parsing (../../url/url_parsing_unittest.cc:145)
Tests took 0 seconds.
